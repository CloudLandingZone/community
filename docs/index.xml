<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on</title><link>https://aws-controllers-k8s.github.io/community/docs/</link><description>Recent content in Docs on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://aws-controllers-k8s.github.io/community/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Background</title><link>https://aws-controllers-k8s.github.io/community/docs/community/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/community/background/</guid><description>In 10/2018 Chris Hein introduced the AWS Service Operator (ASO) project. We reviewed the feedback from the community and stakeholders and in 08/2019 decided to relaunch ASO as a first-tier open source project with concrete commitments from the container service team. In this process, we renamed the project to AWS Controllers for Kubernetes (ACK).
The tenets for the relaunch were:
ACK is a community-driven project, based on a governance model defining roles and responsibilities.</description></item><item><title>Contribution Overview</title><link>https://aws-controllers-k8s.github.io/community/docs/contributor-docs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/contributor-docs/overview/</guid><description>This section of the docs is for ACK contributors.
Code Organization ACK is a collection of source repositories containing a common runtime and type system, a code generator and individual service controllers that manage resources in a specific AWS API.
github.com/aws-controllers-k8s/community: docs and project management (this repo) github.com/aws-controllers-k8s/runtime: common ACK runtime and types github.com/aws-controllers-k8s/code-generator: the code generator and templates github.com/aws-controllers-k8s/test-infra: common test code and infrastructure github.com/aws-controllers-k8s/$SERVICE-controller: individual ACK controllers for AWS services.</description></item><item><title>Install an ACK Controller</title><link>https://aws-controllers-k8s.github.io/community/docs/user-docs/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/user-docs/install/</guid><description>The following guide will walk you through the installation of an ACK service controller.
Individual ACK service controllers may be in different maintenance phases and follow separate release cadences. Please check the project stages and maintenance phases of the ACK service controllers you wish to install, including how controllers are released and versioned. Controllers in a preview maintenance phase have at least one container image and Helm chart released to a public repository.</description></item><item><title>Overview</title><link>https://aws-controllers-k8s.github.io/community/docs/community/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/community/overview/</guid><description>AWS Controllers for Kubernetes (ACK) lets you define and use AWS service resources directly from Kubernetes. With ACK, you can take advantage of AWS-managed services for your Kubernetes applications without needing to define resources outside of the cluster or run services that provide supporting capabilities like databases or message queues within the cluster.
Quicklink
Install an ACK service controller Docker images Each ACK service controller is packaged into a separate container image that is published in a public repository corresponding to an individual ACK service controller.</description></item><item><title>Code Generation</title><link>https://aws-controllers-k8s.github.io/community/docs/contributor-docs/code-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/contributor-docs/code-generation/</guid><description>In order to keep the code for all the service controllers consistent, we will use a strategy of generating the custom resource definitions and controller code stubs for new AWS services.
Options considered To generate custom resource (definitions) and controller stub code, we investigated a number of options:
home-grown custom code generator kudo kubebuilder a hybrid custom code generator + sigs.kubernetes.io/controller-tools (CR) The original AWS Service Operator used a custom-built generator that processed YAML manifests describing the AWS service and used templates to generate CRDs, the controller code itself and the Go types that represent the CRDs in memory.</description></item><item><title>Configure IAM Permissions</title><link>https://aws-controllers-k8s.github.io/community/docs/user-docs/irsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/user-docs/irsa/</guid><description>IAM Roles for Service Accounts, or IRSA, is a system that automates the provisioning and rotation of IAM temporary credentials (called a Web Identity) that a Kubernetes ServiceAccount can use to call AWS APIs.
TL;DR: Instead of creating and distributing your AWS credentials to the containers or using the Amazon EC2 instanceâ€™s role, you can associate an IAM role with a Kubernetes service account. The applications in a Kubernetes pod container can then use an AWS SDK or the AWS CLI to make API requests to authorized AWS services.</description></item><item><title>FAQ</title><link>https://aws-controllers-k8s.github.io/community/docs/community/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/community/faq/</guid><description>Service Broker Question Does ACK replace the service broker? Answer For the time being, people using the service broker should continue to use it and we&amp;rsquo;re coordinating with the maintainers to provide a unified solution.
The service broker project is also an AWS activity that, with the general shift of focus in the community from service broker to operators, can be considered less actively developed. There are a certain things around application lifecycle management that the service broker currently covers and which are at this juncture not yet covered by the scope of ACK, however we expect in the mid to long run that these two projects converge.</description></item><item><title>How it Works</title><link>https://aws-controllers-k8s.github.io/community/docs/community/how-it-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/community/how-it-works/</guid><description>The idea behind AWS Controllers for Kubernetes (ACK) is to enable Kubernetes users to describe the desired state of AWS resources using the Kubernetes API and configuration language. In order to make this happen, let&amp;rsquo;s take a look under the covers and walk through how different components in the system interact.
In the diagram above, Alice is our Kubernetes user. Her application depends on the existence of an Amazon S3 Bucket named my-bucket.</description></item><item><title>API Inference</title><link>https://aws-controllers-k8s.github.io/community/docs/contributor-docs/api-inference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/contributor-docs/api-inference/</guid><description>This document discusses how ACK introspects an AWS API model file and determines which CustomResourceDefinitions (CRDs) to construct and what the structure of those CRDs look like.
The Kubernetes Resource Model The Kubernetes Resource Model (KRM) is a set of standards and naming conventions that govern how an Object may be created and updated.
An Object includes some metadata about the object &amp;ndash; a GroupVersionKind (GVK), a Name, a Namespace, and zero or more Labels and Annotations.</description></item><item><title>Create an ACK Resource</title><link>https://aws-controllers-k8s.github.io/community/docs/user-docs/resource-crud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aws-controllers-k8s.github.io/community/docs/user-docs/resource-crud/</guid><description>Note While this guide provides examples for managing S3 bucket, you can find sample manifest files for other AWS services in test/e2e/resources directory of corresponding service controller&amp;rsquo;s GitHub repository. For example: Sample manifest for ecr repository can be found here
You can find API Reference for all the services supported by ACK here
Create an S3 bucket export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query &amp;quot;Account&amp;quot; --output text) export BUCKET_NAME=my-ack-s3-bucket-$AWS_ACCOUNT_ID read -r -d '' BUCKET_MANIFEST &amp;lt;&amp;lt;EOF apiVersion: s3.</description></item></channel></rss>